import 'dart:developer';
import 'dart:io';
import 'dart:typed_data';
import 'dart:ui';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:hotelservice/controller/hotel_authContrlr.dart';
import 'package:hotelservice/homeHotel/homescreen.dart';
import 'dart:ui' as ui;
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:uuid/uuid.dart';

class HomeController extends GetxController {
  // @override
  // void onInit() {
  //   log('oninit===============================');

  //   RetrivingCAtegryInit();
  //   // TODO: implement onInit
  //   super.onInit();
  // }

  // @override
  // void onClose() {
  //   category.clear();
  //   log('category Cleared@@@@@@@@@@@@@@@@@@@@@@@@');
  //   // TODO: implement onClose
  //   super.onClose();
  // }

  hotel_authController hotlAuthCntlrInHomContrl =
      Get.put(hotel_authController());

  RxString Categorychoose = ''.obs;
  RxBool AutogenButn = true.obs;
  RxBool textfeildEnable = true.obs;

  List<String> category = [];

  TextEditingController categoryField = TextEditingController();

  // upload product/////
  TextEditingController UPLoadProctID = TextEditingController();
  TextEditingController UPLoadProctDEscription = TextEditingController();
  TextEditingController UPLoadProctName = TextEditingController();
  TextEditingController UPLoadProctPrice = TextEditingController();
  final GlobalKey PUpkey = GlobalKey();

  GneraterpoductId() {
    UPLoadProctID.text = const Uuid().v4();
    AutogenButn.value = false;
    log("Button is hided");
    textfeildEnable.value = false;
    log("textfeild is disabled");
    Get.snackbar('Alert', 'AutoGenerated Product ID Cannot Edit');
  }

  // UploadTask? task;
  // File? file;
  // final fileName = file != null ? basename(file!.path) : 'No File Selected'.obs;

  // var scr = new GlobalKey();
  // GlobalKey globalKey = new GlobalKey();

  // takescrshot() async {
  //   RenderRepaintBoundary? boundary =
  //       scr.currentContext?.findRenderObject() as RenderRepaintBoundary?;
  //   var image = await boundary?.toImage();
  //   log(image.toString());
  //   var byteData = await image?.toByteData(format: ImageByteFormat.png);
  //   var pngBytes = byteData?.buffer.asUint8List();
  //   print(pngBytes.toString());
  //   //

  // }
  RxString ButtonText = 'Download'.obs;
  final GlobalKey key = GlobalKey();

  String _message = 'Press the button to take a screenshot';

  // Qr code Generator
  void takeScreenshot() async {
    RenderRepaintBoundary boundary =
        key.currentContext!.findRenderObject() as RenderRepaintBoundary;

    ui.Image image = await boundary.toImage(pixelRatio: 3.0);
    ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
    if (byteData != null) {
      Uint8List pngBytes = byteData.buffer.asUint8List();

      // Saving the screenshot to the gallery
      final result = await ImageGallerySaver.saveImage(
          Uint8List.fromList(pngBytes),
          quality: 90,
          name: 'screenshot-${DateTime.now()}.png');

      if (kDebugMode) {
        print(result);
      }

      (ButtonText.value = ' Downloaded Succesfully ');
      Get.snackbar(
          ' âœ“ Downloaded', 'QR Code Image Successfully Added to Gallery',
          duration: Duration(seconds: 4));
    }
  }

//  Add A New Category
  uploadCatgry() async {
    log('upload started');

    CollectionReference orderRef =
        FirebaseFirestore.instance.collection('category');

    await orderRef.doc().set({
      'hotel_id': hotlAuthCntlrInHomContrl.SharedpreFHotelId.toString(),
      'category_item': categoryField.text.toString()
    }).whenComplete(() {
      categoryField.clear();
      Get.snackbar(
          'Successfully Uploaded', 'New Category Succesfully Uploaded');
    });
  }

  DeleteNewCategory(id) async {
    final CateRef = FirebaseFirestore.instance
        .collection('category')
        .doc(id)
        .delete()
        .whenComplete(() {
      Fluttertoast.showToast(
          msg: "Category Deleted Successfully",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.CENTER,
          timeInSecForIosWeb: 1,
          backgroundColor: Color.fromARGB(255, 239, 7, 7),
          textColor: Color.fromARGB(255, 254, 255, 253),
          fontSize: 16.0);
    });
  }

  RetrivingCAtegryInit() async {
    String HOtelidInit = hotlAuthCntlrInHomContrl.SharedpreFHotelId.toString();
    log('//////////////////////////////' + HOtelidInit);
    FirebaseFirestore.instance
        .collection('category')
        .where('hotel_id', isEqualTo: HOtelidInit)
        .get()
        .then((snapshot) => {
              snapshot.docs.forEach((doc) {
                category.add(doc['category_item']);

                log('retriving');
                log(category.toString());
              })
            });

    // for (int i = 0; i <= category.length; i++) {
    //   log(category.toString());
    // }
  }

  /// upload a product

  // Future selectFile() async {
  //   final result = await FilePicker.platform.pickFiles(allowMultiple: false);

  //   if (result == null) return;
  //   final path = result.files.single.path!;

  //   file = File(path);
  // }

  // Future uploadFile() async {
  //   if (file == null) return;

  //   final fileName = basename(file!.path);
  //   final destination = 'files/$fileName';

  //   task = FirebaseApi.uploadFile(destination, file!);
  //   // setState(() {});

  //   if (task == null) return;

  //   final snapshot = await task!.whenComplete(() {});
  //   final urlDownload = await snapshot.ref.getDownloadURL();

  //   print('Download-Link: $urlDownload');
  // }

  //uploaad a product///
}
