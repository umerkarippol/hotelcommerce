import 'dart:developer';
import 'dart:io';
// import 'dart:js';
import 'dart:typed_data';
import 'dart:ui';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:get/get.dart';
import 'package:hotelservice/controller/hotel_Homecontroller.dart';
import 'package:hotelservice/controller/hotel_authContrlr.dart';
import 'package:hotelservice/homeHotel/homescreen.dart';
import 'dart:ui' as ui;
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:image_picker/image_picker.dart';
import 'package:uuid/uuid.dart';

class HomeController extends GetxController {
  // @override
  // void onInit() {
  //   log('oninit===============================');

  //   RetrivingCAtegryInit();
  //   // TODO: implement onInit
  //   super.onInit();
  // }

  // @override
  // void onClose() {
  //   category.clear();
  //   log('category Cleared@@@@@@@@@@@@@@@@@@@@@@@@');
  //   // TODO: implement onClose
  //   super.onClose();
  // }

  hotelHomeController hotlCntlrInHomContrl = Get.put(hotelHomeController());

  RxString Categorychoose = ''.obs;
  RxBool AutogenButn = true.obs;
  RxBool textfeildEnable = true.obs;

  List<String> category = [];

  TextEditingController categoryField = TextEditingController();

  // upload product/////
  var isloading = false.obs;
  XFile? file;
  String ImageURL = '';

  RxBool ImagePikStatus = false.obs;
  TextEditingController UPLoadProctID = TextEditingController();
  TextEditingController UPLoadProctDEscription = TextEditingController();
  TextEditingController UPLoadProctName = TextEditingController();
  TextEditingController UPLoadProctPrice = TextEditingController();
  var PupKey = GlobalKey<FormState>();
  Formsubmit() {
    log(Categorychoose.toString());
    log(file!.path.toString());
    if (Categorychoose.isNotEmpty && file!.path.isNotEmpty) {
      final isValid = PupKey.currentState!.validate();
      if (!isValid) {
        return;
      }
      PupKey.currentState!.save();
    } else
      Get.defaultDialog(
          title: 'Alert',
          content: Text('Please Select a Category  and image!'));

    // } else {
    //   Get.defaultDialog(
    //       title: 'Alert',
    //       content: Text('Please Select a Category  and image!'));
    // }
    // return;

    // if (ImageURL.isEmpty) {
    //   Get.defaultDialog(
    //       title: 'Alert', content: Text('Please Select An Image To Upload!'));
    // }
  }

  GneraterpoductId() {
    UPLoadProctID.text = const Uuid().v4();
    AutogenButn.value = false;
    log("Button is hided");
    textfeildEnable.value = false;
    log("textfeild is disabled");
    Get.snackbar('Alert', 'AutoGenerated Product ID Cannot Edit');
  }

  RxString ButtonText = 'Download'.obs;
  final GlobalKey ScrenShotkey = GlobalKey();

  String _message = 'Press the button to take a screenshot';

  // Qr code Generator
  void takeScreenshot() async {
    RenderRepaintBoundary boundary = ScrenShotkey.currentContext!
        .findRenderObject() as RenderRepaintBoundary;

    ui.Image image = await boundary.toImage(pixelRatio: 3.0);
    ByteData? byteData = await image.toByteData(format: ui.ImageByteFormat.png);
    if (byteData != null) {
      Uint8List pngBytes = byteData.buffer.asUint8List();

      // Saving the screenshot to the gallery
      final result = await ImageGallerySaver.saveImage(
          Uint8List.fromList(pngBytes),
          quality: 90,
          name: 'screenshot-${DateTime.now()}.png');

      if (kDebugMode) {
        print(result);
      }

      (ButtonText.value = ' Downloaded Succesfully ');
      Get.snackbar(
          ' âœ“ Downloaded', 'QR Code Image Successfully Added to Gallery',
          duration: Duration(seconds: 4));
    }
  }

//  Add A New Category
  uploadCatgry() async {
    log('upload started');

    CollectionReference orderRef =
        FirebaseFirestore.instance.collection('category');

    await orderRef.doc().set({
      'hotel_id': hotlCntlrInHomContrl.SharedpreFHotelId.toString(),
      'category_item': categoryField.text.toString()
    }).whenComplete(() {
      categoryField.clear();
      Get.snackbar(
          'Successfully Uploaded', 'New Category Succesfully Uploaded');
    });
  }

  DeleteNewCategory(id) async {
    final CateRef = FirebaseFirestore.instance
        .collection('category')
        .doc(id)
        .delete()
        .whenComplete(() {
      Fluttertoast.showToast(
          msg: "Category Deleted Successfully",
          toastLength: Toast.LENGTH_SHORT,
          gravity: ToastGravity.CENTER,
          timeInSecForIosWeb: 1,
          backgroundColor: Color.fromARGB(255, 239, 7, 7),
          textColor: Color.fromARGB(255, 254, 255, 253),
          fontSize: 16.0);
    });
  }

  RetrivingCAtegryInit() async {
    String HOtelidInit = hotlCntlrInHomContrl.SharedpreFHotelId.toString();
    log('//////////////////////////////' + HOtelidInit);
    FirebaseFirestore.instance
        .collection('category')
        .where('hotel_id', isEqualTo: HOtelidInit)
        .get()
        .then((snapshot) => {
              snapshot.docs.forEach((doc) {
                category.add(doc['category_item']);

                log('retriving');
                log(category.toString());
              })
            });

    // for (int i = 0; i <= category.length; i++) {
    //   log(category.toString());
    // }
  }

  /// upload a product

  selectFile() async {
    try {
      ImagePicker imagePicker = ImagePicker();

      file = await imagePicker.pickImage(source: ImageSource.gallery);
      if (file == null) {
        Get.defaultDialog(
            title: 'Alert!', content: Text('No Image Where Picked '));
      } else {
        ImagePikStatus.value = true;

        // log(file.path.toString());
      }
    } catch (e) {
      log(e.toString());
    }
    if (file == null) return;
  }

  Future<String> uploadFile() async {
    String uniqueNAme = DateTime.now().millisecondsSinceEpoch.toString();
    Reference referenceRoot = FirebaseStorage.instance.ref();
    Reference referenceDirImage = referenceRoot.child('Images');
    Reference referenceImageToUpload = referenceDirImage.child(uniqueNAme);
    try {
      await referenceImageToUpload.putFile(File(file!.path));
      ImageURL = await referenceImageToUpload.getDownloadURL();

      log(ImageURL);
    } catch (error) {
      log(error.toString());
    }
    return ImageURL;
  }

  UpLOAdAlldAta() async {
    isloading.value = true;
    String imageurll = await uploadFile();
    // Get.defaultDialog(
    //     content: Center(
    //   child: CircularProgressIndicator(),
    // ));
    log('0000000000000000000000000000000' + ImageURL);
    log(' Final Upload Started');
    log('Category :' + Categorychoose.toString());
    log('Product Name :' + UPLoadProctName.text);
    log('Product Description :' + UPLoadProctDEscription.text);
    log('Product Price:' + UPLoadProctPrice.text);
    log('Product Id :' + UPLoadProctID.text);
    log('Hotel Id' + hotlCntlrInHomContrl.SharedpreFHotelId.toString());
    log('Image URL:' + ImageURL);

    CollectionReference orderRef =
        FirebaseFirestore.instance.collection('products');

    await orderRef.doc().set({
      'category_item': Categorychoose.toString(),
      'item': UPLoadProctName.text,
      'description': UPLoadProctDEscription.text,
      'price': UPLoadProctPrice.text,
      'product_id': UPLoadProctID.text,
      'hotel_id': hotlCntlrInHomContrl.SharedpreFHotelId.toString(),
      'image': ImageURL,
    }).whenComplete(() {
      Get.snackbar('Successfully Uploaded', 'New Product Succesfully Uploaded');

      // Categorychoose = '' as RxString;
      UPLoadProctName.clear();
      UPLoadProctDEscription.clear();
      UPLoadProctPrice.clear();
      UPLoadProctID.clear();
      ImageURL = '';
    });

    log(' Final Upload Compleated Successfully');
    isloading.value = false;
  }

  //uploaad a product///
}
